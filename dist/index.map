{"version":3,"sources":["index.js"],"names":["defineComponent","componentClazz","ElementTemplate","getElementTemplate","vm","prototype","connectedCallback","documentFlagment","strToHtml","template","trim","data","registerDefineProperty","targetDom","isNative","attachShadow","mode","appendChild","style","styleDom","document","createElement","textContent","_this","$emit","eventName","detail","dispatchEvent","CustomEvent","attrs","Object","keys","props","observedAttributes","attributeChangedCallback","apply","arguments","tagName","getTagNameByClazzName","name","define","createHostConstructor","Function","fn","test","clazzName","replace","match","toLowerCase","slice","str","innerHTML","content","eventListener","event","currentTarget","events","type","bindEvent","documentFragment","context","childNodes","forEach","node","attributes","i","startsWith","methodName","getAttribute","methods","call","addEventListener","length","strTemplateRegExp","registerDom","nodeType","Node","TEXT_NODE","strTemplate","nodeValue","protoNameArr","refreshDom","resultStr","expression","join","evalFn","push","watcher","protoName","defineProperty","newVal","register","callback","obj"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// import '@webcomponents/custom-elements';\n\nexport const defineComponent = function (componentClazz) {\n  let ElementTemplate = getElementTemplate();\n  const vm = new componentClazz();\n  ElementTemplate.prototype.connectedCallback = function() {\n      const documentFlagment = strToHtml(vm.template.trim());\n      vm.data && registerDefineProperty(vm);\n      registerDom(documentFlagment, vm);\n      let targetDom = this;\n      if (isNative(this.attachShadow)) {\n        targetDom = this.attachShadow({mode: 'open'});\n      }\n      targetDom.appendChild(documentFlagment);\n      if (vm.style) {\n        const styleDom = document.createElement('style');\n        styleDom.textContent = vm.style.trim();\n        targetDom.appendChild(styleDom);\n      }\n      bindEvent(targetDom, vm);\n      const _this = this;\n      vm.$emit = function(eventName, detail) {\n        _this.dispatchEvent(new CustomEvent(eventName, {detail}));\n      }\n  }\n  const attrs = Object.keys(vm.props);\n  ElementTemplate.observedAttributes = attrs;\n  ElementTemplate.prototype.attributeChangedCallback = function() {\n      vm.attributeChangedCallback.apply(this, arguments);\n  }\n  const tagName = vm.tagName || getTagNameByClazzName(componentClazz.name);\n  customElements.define(tagName, ElementTemplate);\n};\n\nexport default {\n  defineComponent\n}\n\nconst getElementTemplate = function () {\n  const createHostConstructor = new Function('', 'return class extends HTMLElement{}');\n  return createHostConstructor();\n};\n\nfunction isNative(fn) {\n  return (/\\{\\s*\\[native code\\]\\s*\\}/).test('' + fn);\n}\n\nconst getTagNameByClazzName = function (clazzName) {\n  return clazzName\n          .replace(/[A-Z]/g, (match) => '-' + match.toLowerCase())\n          .slice(1);\n};\n\nconst strToHtml = function(str) {\n  const template = document.createElement('template');\n  template.innerHTML = str;\n  return template.content;\n};\n\nconst eventListener = event => event.currentTarget.events[event.type](event);\n\nconst bindEvent = function(documentFragment, context) {\n  documentFragment.childNodes.forEach((node) => {\n    if (!node.tagName) return ;\n    bindEvent(node, context);\n    const { attributes } = node;\n    for (let i = 0; i < attributes.length; i++) {\n      let { name } = attributes[i];\n      if (!name.startsWith('@')) continue;\n      const methodName = node.getAttribute(name);\n      name = name.slice(1);\n      if (!node.events) {\n          node.events = {};\n      }\n      node.events[name] = function (event) {\n          if (context.methods) context.methods[methodName].call(context, event);\n      };\n      node.addEventListener(name, eventListener);\n    }\n  });\n};\n\nconst strTemplateRegExp = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\n\nconst registerDom = function(documentFragment, context) {\n    documentFragment.childNodes.forEach((node) => {\n        if (node.nodeType === Node.TEXT_NODE) {\n            const strTemplate = node.nodeValue;\n            if (!strTemplateRegExp.test(strTemplate)) return;\n            const protoNameArr = Object.keys(context.data);\n            const refreshDom = function () {\n                let resultStr = strTemplate;\n                resultStr.replace(strTemplateRegExp, function(match, expression) {\n                    const keys = protoNameArr.join(',');\n                    const evalFn = new Function(`{${keys}}`, `return ${expression}`);\n                    resultStr = resultStr.replace(match, evalFn(context.data));\n                });\n                if(node.nodeValue !== resultStr)\n                    node.nodeValue = resultStr;\n            };\n            refreshDom();\n            watcher.push(refreshDom);\n        }\n        registerDom(node, context);\n    });\n};\n\nconst watcher = [];\n\nconst registerDefineProperty = function(context) {\n    Object.keys(context.data()).forEach((protoName) => {\n        context.data['_' + protoName] = context.data()[protoName];\n        Object.defineProperty(context.data, protoName, {\n            set: function(newVal) {\n                if (context.data['_' + protoName] === newVal) return;\n                context.data['_' + protoName] = newVal;\n                // newVal is Object\n                if(newVal instanceof Object)\n                    register(newVal);\n                watcher.forEach((callback) => callback());\n\n            },\n            get: function() {\n                return context.data['_' + protoName];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        if(context.data[protoName] instanceof Object)\n            register(context.data[protoName]);\n    });\n};\n\nconst register = function(obj) {\n    Object.keys(obj).forEach((protoName) => {\n        obj['_' + protoName] = obj[protoName];\n\n        Object.defineProperty(obj, protoName, {\n            set: function(newVal) {\n                if (obj['_' + protoName] === newVal) return;\n                obj['_' + protoName] = newVal;\n                watcher.forEach((callback) => callback());\n            },\n            get: function() {\n                return obj['_' + protoName];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        if(obj[protoName] instanceof Object)\n            register(obj[protoName]);\n    });\n};"]}