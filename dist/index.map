{"version":3,"sources":["index.js"],"names":["defineComponent","componentClazz","ElementTemplate","getElementTemplate","vm","prototype","connectedCallback","documentFlagment","strToHtml","template","trim","appendChild","style","styleDom","document","createElement","textContent","attrs","Object","keys","props","observedAttributes","attributeChangedCallback","apply","arguments","tagName","getTagNameByClazzName","name","define","isNative","customElements","createHostConstructor","Function","self","HTMLElement","call","fn","test","clazzName","replace","match","toLowerCase","slice","str","innerHTML","content","eventListener","event","currentTarget","events","type","bindEvent","documentFragment","context","childNodes","forEach","node","attributes","i","startsWith","methodName","getAttribute","methods","addEventListener","length","strTemplateRegExp","registerDom","nodeType","Node","TEXT_NODE","strTemplate","nodeValue","protoNameArr","data","refreshDom","resultStr","expression","join","evalFn","push","watcher","registerDefineProperty","protoName","defineProperty","newVal","register","callback","obj"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["// import '@webcomponents/custom-elements';\n\nexport const defineComponent = function (componentClazz) {\n  let ElementTemplate = getElementTemplate();\n  const vm = new componentClazz();\n  ElementTemplate.prototype.connectedCallback = function() {\n      const documentFlagment = strToHtml(vm.template.trim());\n      registerDefineProperty(vm);\n      registerDom(documentFlagment, vm);\n      this.appendChild(documentFlagment);\n      if (vm.style) {\n        const styleDom = document.createElement('style');\n        styleDom.textContent = vm.style.trim();\n        this.appendChild(styleDom);\n      }\n      bindEvent(this, vm);\n  }\n  const attrs = Object.keys(vm.props);\n  ElementTemplate.observedAttributes = attrs;\n  ElementTemplate.prototype.attributeChangedCallback = function() {\n      vm.attributeChangedCallback.apply(this, arguments);\n  }\n  const tagName = vm.tagName || getTagNameByClazzName(componentClazz.name);\n  customElements.define(tagName, ElementTemplate);\n};\n\nexport default {\n  defineComponent\n}\n\nconst getElementTemplate = function () {\n  let ElementTemplate;\n  if (isNative(customElements.define)) {\n    // ElementTemplate = class extends HTMLElement {}\n    // 为了不让 babel 编译成 es5\n    const createHostConstructor = new Function('', 'return class extends HTMLElement{}');\n    ElementTemplate = createHostConstructor();\n  } else {\n    ElementTemplate = function(self) {\n      return HTMLElement.call(this, self);\n    };\n  }\n  return ElementTemplate;\n};\n\nfunction isNative(fn) {\n  return (/\\{\\s*\\[native code\\]\\s*\\}/).test('' + fn);\n}\n\nconst getTagNameByClazzName = function (clazzName) {\n  return clazzName\n          .replace(/[A-Z]/g, (match) => '-' + match.toLowerCase())\n          .slice(1);\n};\n\nconst strToHtml = function(str) {\n  const template = document.createElement('template');\n  template.innerHTML = str;\n  return template.content;\n};\n\nconst eventListener = event => event.currentTarget.events[event.type](event);\n\nconst bindEvent = function(documentFragment, context) {\n  documentFragment.childNodes.forEach((node) => {\n    if (!node.tagName) return ;\n    bindEvent(node, context);\n    const { attributes } = node;\n    for (let i = 0; i < attributes.length; i++) {\n      let { name } = attributes[i];\n      if (!name.startsWith('@')) continue;\n      const methodName = node.getAttribute(name);\n      name = name.slice(1);\n      if (!node.events) {\n          node.events = {};\n      }\n      node.events[name] = function (event) {\n          if (context.methods) context.methods[methodName].call(context, event);\n      };\n      node.addEventListener(name, eventListener);\n    }\n  });\n};\n\nconst strTemplateRegExp = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\n\nconst registerDom = function(documentFragment, context) {\n    documentFragment.childNodes.forEach((node) => {\n        if (node.nodeType === Node.TEXT_NODE) {\n            const strTemplate = node.nodeValue;\n            if (!strTemplateRegExp.test(strTemplate)) return;\n            const protoNameArr = Object.keys(context.data);\n            const refreshDom = function () {\n                let resultStr = strTemplate;\n                resultStr.replace(strTemplateRegExp, function(match, expression) {\n                    const keys = protoNameArr.join(',');\n                    const evalFn = new Function(`{${keys}}`, `return ${expression}`);\n                    resultStr = resultStr.replace(match, evalFn(context.data));\n                });\n                if(node.nodeValue !== resultStr)\n                    node.nodeValue = resultStr;\n            };\n            refreshDom();\n            watcher.push(refreshDom);\n        }\n        registerDom(node, context);\n    });\n};\n\nconst watcher = [];\n\nconst registerDefineProperty = function(context) {\n    Object.keys(context.data()).forEach((protoName) => {\n        context.data['_' + protoName] = context.data()[protoName];\n        Object.defineProperty(context.data, protoName, {\n            set: function(newVal) {\n                if (context.data['_' + protoName] === newVal) return;\n                context.data['_' + protoName] = newVal;\n                // newVal is Object\n                if(newVal instanceof Object)\n                    register(newVal);\n                watcher.forEach((callback) => callback());\n\n            },\n            get: function() {\n                return context.data['_' + protoName];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        if(context.data[protoName] instanceof Object)\n            register(context.data[protoName]);\n    });\n};\n\nconst register = function(obj) {\n    Object.keys(obj).forEach((protoName) => {\n        obj['_' + protoName] = obj[protoName];\n\n        Object.defineProperty(obj, protoName, {\n            set: function(newVal) {\n                if (obj['_' + protoName] === newVal) return;\n                obj['_' + protoName] = newVal;\n                watcher.forEach((callback) => callback());\n            },\n            get: function() {\n                return obj['_' + protoName];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        if(obj[protoName] instanceof Object)\n            register(obj[protoName]);\n    });\n};"]}